<?xml version="1.0" encoding="UTF-8" ?>
<!--配置文件如果发生改变，将会被重新加载 -->
<!-- scanPeriod设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
<!--debug当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <property resource="logback/logback.properties" />
    <substitutionProperty name="PROJECT_NAME" value="jxufeAlumni"/>
    <substitutionProperty name="LOG_HOME" value="${monitor.log.home}"/>
    <timestamp key="byDate" datePattern="yyyyMMdd" />

    <!-- 保存所有的日志 文件日志输出 -->
    <!--RollingFileAppender滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。-->
    <appender name="dkRolling" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- file被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <file>${LOG_HOME}/${PROJECT_NAME}.log</file>
       <!-- append如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。-->
        <append>true</append>
        <!-- rollingPolicy当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${PROJECT_NAME}-%d{yyyy-MM-dd}.%i.zip</fileNamePattern>
            <!--日志保存天数-->
            <maxHistory>30</maxHistory>
            <!--滚动策略:日志文件大于100MB时生成一个新的日志文件，每天生成一个新的日志文件-->
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>100MB</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 对记录事件进行格式化 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}  [%thread] %-5level %logger{100} - %msg%n</pattern>
            <immediateFlush>true</immediateFlush>
        </encoder>
    </appender>
    <!--控制台打印-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}  [%thread] %-5level %logger{80} - %msg%n</pattern>
            <immediateFlush>true</immediateFlush>
        </encoder>
    </appender>

    <!--打印sql-->
    <logger name="org.mybatis.spring.SqlSessionUtils" level="INFO" />

    <logger name="o.m.spring.transaction.SpringManagedTransaction" level="INFO"/>
    <!--打印某个包下的日志-->
    <logger name="com.xfl" level="DEBUG" />
    <!--打印mybatis事物-->
    <logger name="org.mybatis.spring.transaction.SpringManagedTransaction" level="INFO" />
    <!--日志级别-->
    <root level="DEBUG">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="dkRolling" />
    </root>
</configuration>